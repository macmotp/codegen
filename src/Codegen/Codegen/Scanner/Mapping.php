<?php

namespace Macmotp\Codegen\Scanner;

use Macmotp\Codegen\Exceptions\InvalidCodegenMappingException;

/**
 * Class Mapping
 *
 * This class holds the hashed mapping for the Swapper
 * The hashes are generated from combinations of binary positions.
 * For example if we want to consider all possible combinations of 2 letters in a word of 6 characters,
 * we have this binary sources:
 * '000011', // 3
 * '000101', // 5
 * '001001', // 9
 * '010001', // 17
 * '100001', // 33
 * '000110', // 6
 * '001010', // 10
 * '010010', // 18
 * '100010', // 34
 * '001100', // 12
 * '010100', // 20
 * '100100', // 36
 * '011000', // 24
 * '101000', // 40
 * '110000', // 48
 *
 * So $mapping[2][6] = [3, 5, 9, 17, 33, 6, 10, 18, 34, 12, 20, 36, 24, 40, 48]
 * Where each number is the reverse of a consecutive iteration
 *
 * @package Macmotp/Codegen
 */
class Mapping
{
    public const MAX_INDEX = 10;
    private const MAP = [
        1 => [
            1 => [1],
            2 => [1,2],
            3 => [1,2,4],
            4 => [1,2,4,8],
            5 => [1,2,4,8,16],
            6 => [1,2,4,8,16,32],
            7 => [1,2,4,8,16,32,64],
            8 => [1,2,4,8,16,32,64,128],
            9 => [1,2,4,8,16,32,64,128,256],
            10 => [1,2,4,8,16,32,64,128,256,512],
        ],
        2 => [
            2 => [3],
            3 => [3,5,6],
            4 => [3,5,9,6,10,12],
            5 => [3,5,9,17,6,10,18,12,20,24],
            6 => [3,5,9,17,33,6,10,18,34,12,20,36,24,40,48],
            7 => [3,5,9,17,33,65,6,10,18,34,66,12,20,36,68,24,40,72,48,80,96],
            8 => [3,5,9,17,33,65,129,6,10,18,34,66,130,12,20,36,68,132,24,40,72,136,48,80,144,96,160,192],
            9 => [3,5,9,17,33,65,129,257,6,10,18,34,66,130,258,12,20,36,68,132,260,24,40,72,136,264,48,80,144,272,96,160,288,192,320,384],
            10 => [3,5,9,17,33,65,129,257,513,6,10,18,34,66,130,258,514,12,20,36,68,132,260,516,24,40,72,136,264,520,48,80,144,272,528,96,160,288,544,192,320,576,384,640,768],
        ],
        3 => [
            3 => [7],
            4 => [7,11,13,14],
            5 => [7,11,19,13,21,25,14,22,26,28],
            6 => [7,11,19,35,13,21,37,25,41,49,14,22,38,26,42,50,28,44,52,56],
            7 => [7,11,19,35,67,13,21,37,69,25,41,73,49,81,97,14,22,38,70,26,42,74,50,82,98,28,44,76,52,84,100,56,88,104,112],
            8 => [7,11,19,35,67,131,13,21,37,69,133,25,41,73,137,49,81,145,97,161,193,14,22,38,70,134,26,42,74,138,50,82,146,98,162,194,28,44,76,140,52,84,148,100,164,196,56,88,152,104,168,200,112,176,208,224],
            9 => [7,11,19,35,67,131,259,13,21,37,69,133,261,25,41,73,137,265,49,81,145,273,97,161,289,193,321,385,14,22,38,70,134,262,26,42,74,138,266,50,82,146,274,98,162,290,194,322,386,28,44,76,140,268,52,84,148,276,100,164,292,196,324,388,56,88,152,280,104,168,296,200,328,392,112,176,304,208,336,400,224,352,416,448],
            10 => [7,11,19,35,67,131,259,515,13,21,37,69,133,261,517,25,41,73,137,265,521,49,81,145,273,529,97,161,289,545,193,321,577,385,641,769,14,22,38,70,134,262,518,26,42,74,138,266,522,50,82,146,274,530,98,162,290,546,194,322,578,386,642,898,28,44,76,140,268,524,52,84,148,276,532,100,164,292,548,196,324,580,388,644,772,56,88,152,280,536,104,168,296,552,200,328,584,392,648,776,112,176,304,560,208,336,592,400,656],
        ],
        4 => [
            4 => [15],
            5 => [15,23,27,29,30],
            6 => [15,23,39,29,45,53,57,30,46,54,58,60],
            7 => [15,23,39,71,29,45,77,53,85,101,57,89,105,113,30,46,78,54,86,102,58,90,106,114,60,92,108,116,120],
            8 => [15,23,39,71,135,29,45,77,141,53,85,149,101,165,197,57,89,153,105,169,201,113,177,209,225,30,46,78,142,54,86,150,102,166,198,58,90,154,106,170,202,114,178,210,226,60,92,156,108,172,204,116,180,212,228,120,184,216,232,240],
            9 => [15,23,39,71,135,263,29,45,77,141,269,53,85,149,277,101,165,293,197,325,389,57,89,153,281,105,169,297,201,329,393,113,177,305,209,337,401,225,353,417,449,30,46,78,142,270,54,86,150,278,102,166,294,198,326,390,58,90,154,282,106,170,298,202,330,394,114,178,306,210,338,402,226,354,418,450,60,92,156,284,108,172,300,204,332,396,116,180,308,212,340,404,228,356,420,452,120,184,312,216,344,408,232,360,424,456,240,368,432,464,480],
            10 => [15,23,39,71,135,263,519,29,45,77,141,269,525,53,85,149,277,533,101,165,293,549,197,325,581,389,645,773,57,89,153,281,537,105,169,297,553,201,329,585,393,649,777,113,177,305,561,209,337,593,401,657,785,225,353,609,417,673,801,449,705,833,897,30,46,78,142,270,526,54,86,150,278,534,102,166,294,550,198,326,582,390,646,774,58,90,154,282,538,106,170,298,554,202,330,586,394,650,778,114,178,306,562,210,338,594,402,658,786,226,354,610,418,674,802,450,706,834,898,60,92,156,284,540,108,172,300,556,204,332,588,396,652,780,116,180,308,564,212,340,596,404,660,788,228,356,612,420,676,804,452,708,836,900,120,184,312,568,216,344,600,408,664,792,232,360,616,424,680,808,456,712,840,904,240,368,624,432,688,816,464,720,848,912,480,736,864,928,960],
        ],
        5 => [
            5 => [31],
            6 => [31,47,55,59,61,62],
            7 => [31,47,79,55,87,103,59,91,107,115,61,93,109,117,121,62,94,110,118,122,124],
            8 => [31,47,79,143,55,87,151,103,167,199,59,91,155,107,171,203,115,179,211,227,61,93,157,109,173,205,117,181,213,229,121,185,217,233,241,62,94,158,110,174,206,118,182,214,230,122,186,218,234,242,124,188,220,236,244,248],
            9 => [31,47,79,143,271,55,87,151,279,103,167,295,199,327,391,59,91,155,283,107,171,299,203,331,395,115,179,307,211,339,403,227,355,419,451,61,93,157,285,109,173,301,205,333,397,117,181,309,213,341,405,229,357,421,453,121,185,313,217,345,409,233,361,425,457,241,369,433,465,481,62,94,158,286,110,174,302,206,334,398,118,182,310,214,342,406,230,358,422,454,122,186,314,218,346,410,234,362,426,458,242,370,434,466,482,124,188,316,220,348,412,236,364,428,460,244,372,436,468,484,248,376,440,472,488,496],
            10 => [31,47,79,143,271,527,55,87,151,279,535,103,167,295,551,199,327,583,391,647,775,59,91,155,283,539,107,171,299,555,203,331,587,395,651,779,115,179,307,563,211,339,595,403,659,787,227,355,611,419,675,803,451,707,835,899,61,93,157,285,541,109,173,301,557,205,333,589,397,653,781,117,181,309,565,213,341,597,405,661,789,229,357,613,421,677,805,453,709,837,901,121,185,313,569,217,345,601,409,665,793,233,361,617,425,681,809,457,713,841,905,241,369,625,433,689,817,465,721,849,913,481,737,865,929,961,62,94,158,286,542,110,174,302,558,206,334,590,398,654,782,118,182,310,566,214,342,598,406,662,790,230,358,614,422,678,806,454,710,838,902,122,186,314,570,218,346,602,410,666,794,234,362,618,426,682,810,458,714,842,906,242,370,626,434,690,818,466,722,850,914,482,738,866,930,962,124,188,316,572,220,348,604,412,668,796,236,364,620,428,684,812,460,716,844,908,244,372,628,436,692,820,468,724,852,916,484,740,868,932,964,248,376,632,440,696,824,472,728,856,920,488,744,872,936,968,496,752,880,944,976,992],
        ],
        6 => [
            6 => [63],
            7 => [63,95,111,119,123,125,126],
            8 => [63,95,159,111,175,207,119,183,215,231,123,187,219,235,243,125,189,221,237,245,249,126,190,222,238,246,250,252],
            9 => [63,95,159,287,111,175,303,207,335,399,119,183,311,215,343,407,231,359,423,455,123,187,315,219,347,411,235,363,427,459,243,371,435,467,483,125,189,317,221,349,413,237,365,429,461,245,373,437,469,485,249,377,441,473,489,497,126,190,318,222,350,414,238,366,430,462,246,374,438,470,486,250,378,442,474,490,498,252,380,444,476,492,500,504],
            10 => [63,95,159,287,543,111,175,303,559,207,335,591,399,655,783,119,183,311,567,215,343,599,407,663,791,231,359,615,423,679,807,455,711,839,903,123,187,315,571,219,347,603,411,667,795,235,363,619,427,683,811,459,715,843,907,243,371,627,435,691,819,467,723,851,915,483,739,867,931,963,125,189,317,573,221,349,605,413,669,797,237,365,621,429,685,813,461,717,845,909,245,373,629,437,693,821,469,725,853,917,485,741,869,933,965,249,377,633,441,697,825,473,729,857,921,489,745,873,937,969,497,753,881,945,977,993,126,190,318,574,222,350,606,414,670,798,238,366,622,430,686,814,462,718,846,910,246,374,630,438,694,822,470,726,854,918,486,742,870,934,966,250,378,634,442,698,826,474,730,858,922,490,746,874,938,970,498,754,882,946,978,994,252,380,636,444,700,828,476,732,860,924,492,748,876,940,972,500,756,884,948,980,996,504,760,888,952,984,1000,1008],
        ],
        7 => [
            7 => [127],
            8 => [127,191,223,239,247,251,253,254],
            9 => [127,191,319,223,351,415,239,367,431,463,247,375,439,471,487,251,379,443,475,491,499,253,381,445,477,493,501,505,254,382,446,478,494,502,506,508],
            10 => [127,191,319,575,223,351,607,415,671,799,239,367,623,431,687,815,463,719,847,911,247,375,631,439,695,823,471,727,855,919,487,743,871,935,967,251,379,635,443,699,827,475,731,859,923,491,747,875,939,971,499,755,883,947,979,995,253,381,637,445,701,829,477,733,861,925,493,749,877,941,973,501,757,885,949,981,997,505,761,889,953,985,1001,1009,254,382,638,446,702,830,478,734,862,926,494,750,878,942,974,502,758,886,950,982,998,506,762,890,954,986,1002,1010,508,764,892,956,988,1004,1012,1016],
        ],
        8 => [
            8 => [255],
            9 => [255,383,447,479,495,503,507,509,510],
            10 => [255,383,639,447,703,831,479,735,863,927,495,751,879,943,975,503,759,887,951,983,999,507,763,891,955,987,1003,1011,509,765,893,957,989,1005,1013,1017,510,766,894,958,990,1006,1014,1018,1020],
        ],
        9 => [
            9 => [511],
            10 => [511,767,895,959,991,1007,1015,1019,1021,1022],
        ],
        10 => [
            10 => [1023],
        ],
    ];

    /**
     * Get the indexes array based on iteration and weight
     *
     * @param int $chunkLength
     * @param int $weight
     * @param int $iteration
     *
     * @return array
     * @throws InvalidCodegenMappingException
     */
    public function getIndexes(int $chunkLength, int $weight, int $iteration): array
    {
        if (! isset(self::MAP[$weight][$chunkLength][$iteration])) {
            throw new InvalidCodegenMappingException(
                sprintf('Cannot identify index for chunk length %d, weight %d and iteration %d', $chunkLength, $weight, $iteration)
            );
        }

        $decimal = self::MAP[$weight][$chunkLength][$iteration];

        return array_map(function ($value) {
            return (int) $value;
        }, str_split(str_pad(strrev(decbin($decimal)), $chunkLength, '0')));
    }

    /**
     * Get the maximum iteration possible for a specific length and weight
     *
     * @param int $chunkLength
     * @param int $weight
     *
     * @return int
     * @throws InvalidCodegenMappingException
     */
    public function getMaxNumberOfIterations(int $chunkLength, int $weight): int
    {
        if (! isset(self::MAP[$weight][$chunkLength])) {
            throw new InvalidCodegenMappingException(
                sprintf('Cannot identify iterations for chunk length %d and weight %d', $chunkLength, $weight)
            );
        }

        return count(self::MAP[$weight][$chunkLength]);
    }
}
